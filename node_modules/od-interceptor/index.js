

core = core||{};
core.utilities = core.utilities || {};
core.utilities.URIHelpers = {
    version : "1.0.6",//bumped to 1.0.6, bug fix in onLinkClicked to support w3c.ui namespace. 
    
    interceptClicks : function(){
        // debugger;
        this.getTargetWindow().document.body.addEventListener("click", this.onLinkClicked.bind(this), false);
        this.disableFormSubmission();
    },

    disableFormSubmission : function(){
        console.log("Intercepting Form Submissions on ", this.getTargetWindow())
        this.getTargetWindow().document.addEventListener("submit", this.onFormSubmit.bind(this), true);
    },

    onFormSubmit : function(e){
        e.preventDefault();
        e.stopPropagation();
        return false;
    },

    disable : function(){
        this.enabled = false;
    },

    enable : function(){
        // debugger;
        this.enabled = true;
    },

    setTargetWindow : function(target){
        console.log("Intercepting Live Redirects on ", target)
        this.targetWindow = target;
        console.log("target win:", this.targetWindow)
    },

    getTargetWindow : function(target){
        return this.targetWindow||window;
    },

    evalUrl : function (path) {
        console.warn("Deprecated: core.utilities.URIHelpers.evalUrl() - use core.utilities.URIHelpers.eval() instead");
        return this.eval(path);
    },

    onLinkClicked : function(e){
        if(!this.enabled) {return}
        var self=this;
        

        var aTag = w3c.ui.WebComponent.prototype.getRealTargetFromEvent(e, "*[href]", "body");
        // var val = aTag?aTag.href:e.target.textContent;
        var val = "";
        if(aTag) {
            var href = (aTag.getAttribute("href")||"").trim();
            if(!href || href == "#" || href == "" || href.indexOf(":void") >=0) {
                val = (aTag.textContent.trim().length > 0)?
                aTag.textContent:(application.classname + "_" + aTag.id);
            } else {
                val = href;
            }
        } else {
            var tagName = e.target.tagName.toLowerCase();
            var targetTitle = e.target.getAttribute("title");
            var targetId = e.target.id;
            var src = e.target.getAttribute("src");
            var textContent = e.target.textContent;

            val = textContent||targetTitle||targetId||src||"";
        }
        val = val.trim();

        if(val && val.length > 0) {
            var evt     = this.getTargetWindow().document.createEvent("Event");
            evt.initEvent("handleroute", true, true);
            evt.data    =  {
                value : val,
                target : e.target,
                originalEvent : e
            };
        
            e.target.dispatchEvent(evt);

            if(evt.defaultPrevented) {
                console.log("<core.utilities.URIHelpers>#onLinkClicked() - Default routing of clicked link/label was stopped");
                return;
            }


            var mapped_uri = core.utilities.URIHelpers.map(val);
            if(mapped_uri){
                var href = core.utilities.URIHelpers.eval(mapped_uri);
                if(href) { 
                    var qstring = val.split("?")[1];
                        qstring = qstring||"";
                    var url = href + ("?" + qstring);
                    this.track(url);
                    e.preventDefault();
                    e.stopPropagation();
                    setTimeout(function() {
                        var target = self.getTargetWindow();
                            target.location.href = url;
                    },100)
                }
                else {
                    //TODO:What happens here?

                    // e.preventDefault();
                    // e.stopPropagation();
                }
            } 
            {
                if(aTag){
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
        }
    },

    track : function(data) {//TODO: test this. Need to ensure window.getParameterByName("Category") returns something now that the api is loaded from the top level frame.
        if(typeof data == "string"){
            var urlparts = data.split("/");
            if(application.track) {
                application.track({
                    "Type": "event", 
                    "Action": "click", 
                    "Category": Config.Category||window.getParameterByName("Category", data)||urlparts[urlparts.length-2], 
                    "Label": Config.Label||window.getParameterByName("Label", data)||data
                })
            }
        }
        else if(typeof data == "object"){
            application.track(data)
        }
    },

    map : function(url){
        for(var regex in ROUTES.URL_MAPPING) {
            var r = new RegExp(regex);
            var matches = url.match(r);
            if(matches) {
                return ROUTES.URL_MAPPING[regex]
            }
        }
        console.warn("core.utilities.URIHelpers.map(): No URL_MAPPING defined for:\n" + url)
        return null;
    },

    eval : function(path){
        path = path.replace(/\{([a-zA-Z0-9\.\_\-]+)\}/gim, function(){
            return eval(arguments[1]);
        });
        return path;
    },

    //TODO:revisit this logic to handle links that are not true <A> tags.
    highlight : function(all_links){
        all_links = [].slice.call(all_links||this.getTargetWindow().document.body.querySelectorAll("a"));
        for(var regex in ROUTES.URL_MAPPING) {
            var r = new RegExp(regex);
            all_links.forEach(function(a){
                var href = a.getAttribute("href");
                var matches = href && href.match(r);
                if(matches) {
                    a.classList.remove("demo-active");
                    setTimeout(function(){
                        a.classList.add("demo-active");
                    },200)
                }
            });
        }
    }
};


if(Session) {
    Session.Interceptor = core.utilities.URIHelpers;
}