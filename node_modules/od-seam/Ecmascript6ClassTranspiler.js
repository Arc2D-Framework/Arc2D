/** @desc ECMASCRIPT 6 CLASS TRANSPILER.
  Able to transpile ES6-style class syntax into
  native ES5 function-contructor syntax.
  Run the code below in Firebug for an example.
*/
const fs = require('fs');
var fs_path = require('path');

var window = {};
window.imported_classes={};


function Ecmascript6ClassTranspiler() { }
Ecmascript6ClassTranspiler.prototype.imports = async function (x, opts, isError) {
    opts = opts || { cache: Config.IMPORTS_CACHE_POLICY || "no-store" };
    return new Promise(async (resolve, reject) => {
        // var path = /^https?:/.test(x)? x : Config.ROOTPATH + x;
        var path = x;
        path = path.replace(/^\/+/, Config.ROOTPATH);
        var error = "Unable to load: " + path;

        if (window.imported_classes[x]) {
            console.warn("redundant imports to : " + x + " detected");
            resolve(window.imported_classes[x]);
            return;
        }

        try {
            debugger;
            var fileContent = fs.readFileSync(path, "utf8");
            if(fileContent){
                // console.log("__dirname",__dirname)
                window.imported_classes[x] = fileContent;
                resolve(fileContent);
            }
            /*const response = await fetch(path, opts);
            if (response.ok) {
                const res = await response.text().then(src => {
                    window.imported_classes[x] = src;
                    resolve(src);
                });
            } else {
                //then()-else{} when ran from server. catch() block never runs
                var src = await response.text();
                console.error(error, src);
                resolve(null);
            }*/
        } catch (e) {
            console.log(`fetching ${path}`,e.message)
            /*var request = new XMLHttpRequest();
            request.open('GET', path, false);
            request.send(null);

            if (request.status == 0 || request.status == 200) {
                src = request.responseText;
                window.imported_classes[x] = src;
                resolve(src);
            }*/
        }
    });
};



Ecmascript6ClassTranspiler.prototype.transpile = function (src) {
    if(!src || src&&src.length<=0){return ""}
    debugger;
    var doTranspile = Config.ENABLE_TRANSPILER;
    // var transpileLevel = src.match(transpileSettings);
    if (doTranspile) {
        src = this.transpileToLevel(src);
        return src;
    } else {
        return src;
    }
};

Ecmascript6ClassTranspiler.prototype.transpileToLevel = function (src) {
    debugger;
    // if(level == "es7") {
    var nsReg = /(?:@{1}[^\s]*\({1}[^\;]*\){1};{1})?\n?namespace\([\'\"]{1}([^\'\"]*)/;
    var nsMatch = src.match(nsReg);
    nsMatch = nsMatch ? nsMatch[1] : "";
    src = this.transipleDecoratorFields(nsMatch, src);
    src = this.transipleClassFields(nsMatch, src);
    src = this.transipleImportsDestructuring(nsMatch, src);
    return src;
    // }
    // else {
    //   return src
    // }
};

Ecmascript6ClassTranspiler.prototype.transipleDecoratorFields = function (
    ns,
    src
) {
    //   var regex = /@([^\s]*)\({1}([^\;]*)\){1};{1}/gm; //<--works but not for @matchmedia
    var regex = /@([^\W]*)\({1}([^\;]*)\){1};{1}/gm; //Feb 7 2019 - to support @matchmedia queries having ('s)
    var props = [];
    if (ns) {
        src = src.replace(regex, (full, method, args) => {
            props.push(`${method}(${ns}, ${args});`);
            return "";
        });
        var fullsrc = src + "\n" + props.join("\n");
    } else {
        src = src.replace(regex, (full, method, args) => {
            return "";
        });
        fullsrc = src;
    }
    return fullsrc;
};

Ecmascript6ClassTranspiler.prototype.transipleImportsDestructuring = function (
    ns,
    src
) {
    var regex = /import\s\{([^\}]*)\}\sfrom\s([^;]*)/gm;
    src = src.replace(regex, (full, destructured_var, src_path) => {
        destructured_var = destructured_var.replace(/\s+as\s+/gm, ":");
        return `const {${destructured_var}} = (()=> {\nimport ${src_path};\n})();`;
    });
    src = src.replace("export ", "return ");
    return src;
};

Ecmascript6ClassTranspiler.prototype.transipleClassFields = function (ns, src) {
    var regex = new RegExp(
        /(\@static|@public|\@private)\s+([^\s]*)\s+\=([^\;]*)\;/gm
    );
    var props = [];

    if (ns) {
        src = src.replace(regex, (full, type, name, val) => {
            type = type.replace("@", "");
            props.push(`field(${ns}, "${type}", "${name}", ${val});`);
            return "";
        });
        var fullsrc = src + "\n" + props.join("\n");
    } else {
        src = src.replace(regex, (full, type, name, val) => {
            return "";
        });
        fullsrc = src;
    }
    return fullsrc;
};

// Ecmascript6ClassTranspiler.prototype.transpile = function(src, doc){
//     var transpileSettings = /@transpile\([\'\"]*([a-zA-Z0-9]*)[\'\"]*\)/;
//     var transpileLevel = src.match(transpileSettings);
//     if(transpileLevel && transpileLevel[1]) {
//       src = this.transpileToLevel(transpileLevel[1],src);
//       return src;
//     }
//     else {return src;}
// };

Ecmascript6ClassTranspiler.prototype.Build = async function (_code, cb) {
    _code = this.transpile(_code)||"";
    var self = this;
    var finished = false;
    var reg = /^import\s*['"]{1}([^'"]*)['"]{1}\;/im;

    //This one works but matches import statements in middle of src
    // var reg = /(?:\/\/\=\s*require|import\W|\#+include\W)\s*[\'\"]?([0-9A-Za-z\-\_\.\/\\]*)[\'\"]?/im;
    // console.log("matches",_code.match(reg))
    while (reg.test(_code)) {
        var s = "";
        var ns_or_path = _code.match(reg)[1];

        if (/\.js|\.mjs$/.test(ns_or_path)) {
            if (window.imported_classes[ns_or_path]) {
                s = /\.mjs$/.test(ns_or_path)
                    ? window.imported_classes[ns_or_path]
                    : ";";
            } else {
                s = await this.imports(ns_or_path);
            }
        } else {
            var paths_to_try = this.pathsToTry(ns_or_path);
            if (
                window.imported_classes[paths_to_try[0]] ||
                window.imported_classes[paths_to_try[1]]
            ) {
                s = ";";
            } else {
                s =
                    (await this.imports(paths_to_try[0], false)) ||
                    (await this.imports(paths_to_try[1], false));
            }
            if (!s) {
                console.error(
                    "Attempted to import a namespace or file by trying 2 locations and failed. Verify your imports. Locations tried: ",
                    paths_to_try
                );
            }
        }
        s = s &&s.length>0 ? this.transpile(s) : "\n";
        _code = _code.replace(reg, s);
    }
    cb(_code);
};

Ecmascript6ClassTranspiler.prototype.pathsToTry = function (_namespace) {
    var paths = [];
    if (/\.js$/.test(_namespace)) {
        paths.push(_namespace);
    } else {
        var classname_path = "src/" + _namespace.replace(/\./g, "/") + ".js";
        var filename_path =
            "src/" + _namespace.replace(/\./g, "/") + "/index.js";
        paths.push(filename_path);
        paths.push(classname_path);
    }
    return paths;
};



module.exports = Ecmascript6ClassTranspiler;