

/*
    A container holds children blocks. By default, a child 
    block spans the full width of the parent container. 
    Example:
        <div class="container">
            <div class="block"></div>
        </div>


    2 child blocks can share equal width space by setting 
    the container in halfs:
        <div class="half container">
            <div class="block"></div>
            <div class="block"></div>
        </div>

    2 child blocks can also be rendered in 2/3rds width.
    The 1st child block will occupy 2/3rds of the containers 
    width:
        <div class="two-thirds container">
            <div class="block"></div>
            <div class="block"></div>
        </div>

    To flip the order, set the "order" of the last child 
    to 0 or 1 to make it the first child:
        <div class="two-thirds container">
            <div class="block"></div>
            <div class="block" style="order:0;"></div>  <!-- will now be 2/3rds width -->
        </div>

    Alternatively, you can reverse the direction of child blocks
    using a "reverse" class on the container:
        <div class="two-thirds container reverse">
            <div class="block"></div>
            <div class="block"></div>  <!-- is now the 1st child with 2/3rds width -->
        </div>

    By default, blocks are rendered into columns, from halfs to 3rds. To
    enable borders between the columns, add a "columns" class to the container. 
    If the blocks are going in reverse, the borders will render on the 
    appropriate side automatically.
    Example:
        <div class="two-thirds container reverse columns">
            <div class="block"></div>
            <div class="block"></div>
        </div>

    3 child blocks can be rendered in 3rds:
        <div class="thirds container">
            <div class="block"></div>
            <div class="block"></div>
            <div class="block"></div>
        </div>

    Containers are designed to render blocks as 100% widths
    so viewing the above examples on any mobile/phone device
    will show blocks stacked on top of each other in 100%
    full width.

    Only when deskto-grid.css is included does the flexbox
    model kick-in for larger resolutions and flex appropriately
    as described above.
*/
.container {
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-justify-content: flex-start;
    -ms-flex-pack: start;
    justify-content: flex-start;
    -webkit-align-content: stretch;
    -ms-flex-line-pack: stretch;
    align-content: stretch;
    -webkit-align-items: stretch;
    -ms-flex-align: stretch;
    align-items: stretch;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
}


/*
    Adding "reverse" to a container will reverse the direction 
    of the child blocks from left to right.
        <div class="two-thirds container reverse">
            <div class="block"></div>
            <div class="block"></div>  <!-- is now the 1st child with 2/3rds width -->
        </div>
*/
.container.reverse {
    -webkit-flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
}


/*
    Defines a block of content. Where content can
    be any piece of textual data having title, sub-title,
    image, link and a call to action <button> or link. A
    content at a higher-level can represent things like
    a product, thumbnail, a photo, an album, a song, 
    a recipe, a contact-item and so on.
*/
.block {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;

    -webkit-order: 0;
    -ms-flex-order: 0;
    order: 0;
    -webkit-flex: 1 1 auto;
    -ms-flex: 1 1 auto;
    flex: 1 1 auto;
    -webkit-align-self: auto;
    -ms-flex-item-align: auto;
    align-self: auto;
}



.block.container.half > .block {
    width: 46%;
}

.block.container.two-thirds > .block:first-child {
    width: 65%;
}
.block.container.two-thirds > .block:last-child {
    width: 35%;
}


.block.container.thirds > .block {
    width: 33%;
    max-width: 33%;
    margin-bottom: 20px;
}




/*
    What a .block contains an img, append this with 
    the block as such:

    <div class="block image">
        <img src="..."/>
    </div>

    This will force the block structural position
    in the DOM to render as though the div came
    before anything else. This allows images to 
    render above text be default. See desktop-grid.css
    where it is overridden for larger screens to
    work normally.
*/
.block.image {
    order:1;
}

/*
    Forces textual blocks to render below image blocks
    on mobile. See "desktop-grid.css" where it is overridden
    to work normal on larger displays.
*/
.block.text {
    order:2;
}





@media (min-width: 550px) {}


